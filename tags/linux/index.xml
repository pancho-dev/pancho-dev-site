<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on pancho.dev</title>
    <link>http://pancho.dev/tags/linux/</link>
    <description>Recent content in linux on pancho.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jul 2020 15:51:59 -0300</lastBuildDate>
    
	<atom:link href="http://pancho.dev/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Who Stole My Cpu?</title>
      <link>http://pancho.dev/posts/who-stole-my-cpu/</link>
      <pubDate>Thu, 16 Jul 2020 15:51:59 -0300</pubDate>
      
      <guid>http://pancho.dev/posts/who-stole-my-cpu/</guid>
      <description>In a previous post I talked about Taming the cpu metrics, while that post was an overview of cpu metrics I thought it was a good topic to emphasize on the cpu steal metric in linux hosts. This is something I recently found and didn&amp;rsquo;t know it even existed, but it can be very useful when running in virtualized environments and helping us tune either the vm, or the physical host that runs the vms.</description>
    </item>
    
    <item>
      <title>Taming the Cpu Metrics</title>
      <link>http://pancho.dev/posts/taming-the-cpu-metrics/</link>
      <pubDate>Sat, 11 Jul 2020 15:08:51 -0300</pubDate>
      
      <guid>http://pancho.dev/posts/taming-the-cpu-metrics/</guid>
      <description>In a past blog post I talked about The misunderstood load average in linux hosts, while load average is a good metric to watch in linux systems to catch generic performance problems, it does not reveal what the issue might be. This time I will dig more into cpu metrics collected from a linux system and explain them, for this purpose I will use multipass vms, and will be showing metrics from grafana screenshots which take the data from prometheus and prometheus node exporter (this is actually out of the scope of this post).</description>
    </item>
    
    <item>
      <title>Multipass Microk8s Cluster on multiple nodes</title>
      <link>http://pancho.dev/posts/multipass-microk8s-cluster/</link>
      <pubDate>Sat, 13 Jun 2020 11:37:56 -0300</pubDate>
      
      <guid>http://pancho.dev/posts/multipass-microk8s-cluster/</guid>
      <description>A couple of posts ago I talked about multi-node kubernetes clusters and the benefits of them running them for developing automation, testing software and configurations. I still think is that most developers probably don&amp;rsquo;t need this setup or can live with a simpler setup. My motivation is because I work on cloud infrastructure and automation of deployments, databases, and lots of complex scenarios that running single node k8s cluster doesn&amp;rsquo;t fit my needs.</description>
    </item>
    
    <item>
      <title>The misunderstood load average in linux hosts</title>
      <link>http://pancho.dev/posts/linux-load-average/</link>
      <pubDate>Sun, 07 Jun 2020 20:02:27 -0300</pubDate>
      
      <guid>http://pancho.dev/posts/linux-load-average/</guid>
      <description>Ever wondered when someone runs the command uptime in a linux host what the values in the load average: section mean? well I have wondered about it many times in my career. And this should be a simple question to ask a seasoned linux administrator or developer, right? well it&amp;rsquo;s not entirely true, as the load average value in a linux hosts probably is the most misunderstood term and often associated with the wrong concepts.</description>
    </item>
    
    <item>
      <title>Creating Kubernetes Kind Cluster</title>
      <link>http://pancho.dev/posts/creating-kubernetes-kind-cluster/</link>
      <pubDate>Sat, 30 May 2020 15:11:30 -0300</pubDate>
      
      <guid>http://pancho.dev/posts/creating-kubernetes-kind-cluster/</guid>
      <description>In an earlier post I showed how to create Multi-node k8s cluster using ignite and k3s, while this was a good experience I needed to test some other tools, and this time I decided to go for kind (kubernetes in docker). Which looks like a good approach to work with clusters locally and it will still be lightweight as the kubernetes &amp;ldquo;nodes&amp;rdquo; will be actually running as docker containers. This at first glance looks like a easier approach and seems to work in a similar way in Mac, linux or Windows, which gives a great advantage.</description>
    </item>
    
    <item>
      <title>Multi-node k8s cluster using ignite and k3s</title>
      <link>http://pancho.dev/posts/multinode-k8s-ignite-k3s/</link>
      <pubDate>Sun, 17 May 2020 18:22:05 -0300</pubDate>
      
      <guid>http://pancho.dev/posts/multinode-k8s-ignite-k3s/</guid>
      <description>Sometimes if you are working with kubernetes, or developing applications that require a multi-node setup to test some functionality running a multi-node cluster is a must, in some cases you could use kind which you can spin up multi-node/multi-master clusters on docker, however there might be scenarios were you still need to test or develop functions that need the real feel of a cluster with multiple nodes.
In the past I have run this in my local environment running vms with vagrant and virtualbox, that worked very well, and I still use it for some special scenarios.</description>
    </item>
    
  </channel>
</rss>